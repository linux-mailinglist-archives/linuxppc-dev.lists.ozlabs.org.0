Return-Path: <linuxppc-dev-bounces+lists+linuxppc-dev=lfdr.de@lists.ozlabs.org>
X-Original-To: lists+linuxppc-dev@lfdr.de
Delivered-To: lists+linuxppc-dev@lfdr.de
Received: from lists.ozlabs.org (lists.ozlabs.org [112.213.38.117])
	by mail.lfdr.de (Postfix) with ESMTPS id 0B4138A0317
	for <lists+linuxppc-dev@lfdr.de>; Thu, 11 Apr 2024 00:15:40 +0200 (CEST)
Authentication-Results: lists.ozlabs.org;
	dkim=pass (1024-bit key; unprotected) header.d=163.com header.i=@163.com header.a=rsa-sha256 header.s=s110527 header.b=LBqGeTDE;
	dkim-atps=neutral
Received: from boromir.ozlabs.org (localhost [IPv6:::1])
	by lists.ozlabs.org (Postfix) with ESMTP id 4VFHG14kDSz3vfx
	for <lists+linuxppc-dev@lfdr.de>; Thu, 11 Apr 2024 08:15:37 +1000 (AEST)
X-Original-To: linuxppc-dev@lists.ozlabs.org
Delivered-To: linuxppc-dev@lists.ozlabs.org
Authentication-Results: lists.ozlabs.org;
	dkim=pass (1024-bit key; unprotected) header.d=163.com header.i=@163.com header.a=rsa-sha256 header.s=s110527 header.b=LBqGeTDE;
	dkim-atps=neutral
Authentication-Results: lists.ozlabs.org; spf=pass (sender SPF authorized) smtp.mailfrom=163.com (client-ip=220.197.31.4; helo=m16.mail.163.com; envelope-from=sensor1010@163.com; receiver=lists.ozlabs.org)
Received: from m16.mail.163.com (m16.mail.163.com [220.197.31.4])
	by lists.ozlabs.org (Postfix) with ESMTP id 4VF3tr0yNXz3cBK
	for <linuxppc-dev@lists.ozlabs.org>; Wed, 10 Apr 2024 23:43:11 +1000 (AEST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=163.com;
	s=s110527; h=Date:From:Subject:Content-Type:MIME-Version:
	Message-ID; bh=Lbg7HGEsOcZKgvnpkxv1GS1z9ypqDJXy+bROLpI1By8=; b=L
	BqGeTDECJPTZvu83sei/mNi5X+nEOv2b2ctF0OrrOOrcBEAqJQaLGYB3LPx6dKpy
	rFgs1sLNo/7thNBcnvVVdbar5RVQ5oLNZY4UlDSvNz1zWhVDWyQHwtRHuv67q8du
	GNhu/HvwdQLcAUsRL3s18BcR2Ca7qs53FU0TzR5dKk=
Received: from mail-tracker-145-3ep34-c9h23-5f64cf7787-82gdh (unknown [10.131.138.72])
	by smtp100 (Coremail) with SMTP id KSIvCgC3rwBZlxZmGh8uAA--.497S2;
	Wed, 10 Apr 2024 21:42:49 +0800 (CST)
Received: from sensor1010$163.com ( [101.86.11.106] ) by
 ajax-webmail-wmsvr-trace-40-93 (Coremail) ; Wed, 10 Apr 2024 21:42:27 +0800
 (CST)
Date: Wed, 10 Apr 2024 21:42:27 +0800 (CST)
From: lizhe  <sensor1010@163.com>
To: christophe.leroy@csgroup.eu, rafael@kernel.org, viresh.kumar@linaro.org, 
	ray.huang@amd.com, marcan@marcan.st, sven@svenpeter.dev, 
	alyssa@rosenzweig.io, mmayer@broadcom.com, 
	bcm-kernel-feedback-list@broadcom.com, 
	srinivas.pandruvada@linux.intel.com, lenb@kernel.org, 
	khilman@kernel.org, mpe@ellerman.id.au, npiggin@gmail.com, 
	aneesh.kumar@kernel.org, naveen.n.rao@linux.ibm.com, 
	andersson@kernel.org, konrad.dybcio@linaro.org, sudeep.holla@arm.com, 
	cristian.marussi@arm.com, thierry.reding@gmail.com, 
	jonathanh@nvidia.com, matthias.bgg@gmail.com, 
	angelogioacchino.delregno@collabora.com
Subject: Re:[PATCH] cpufreq: Covert to exit callback returning void
X-Priority: 3
X-Mailer: Coremail Webmail Server Version XT5.0.14 build 20230109(dcb5de15)
 Copyright (c) 2002-2024 www.mailtech.cn 163com
In-Reply-To: <20240410132247.3587-1-sensor1010@163.com>
References: <20240410132247.3587-1-sensor1010@163.com>
X-CM-CTRLMSGS: M0GSHnBsdXM9MTcxMjc1NjU0NzczOF9hNTBlNDY1YmNlNjFmY2RiNDNlYjMxM
 jJhZmQyYmZiOCZtYWlsVHJhY2tpbmc9MSZ0cmFjZUtleT0yMDJkODA2NjAwOTI2ZGU1NDAyODNk
 OTEyMGI3NDU4OA==
X-NTES-SC: AL_Qu2aAPueuU0v4SicZOkfm0cagO04WMKxufUi3o9TOph6jC/pxiQ/Q3Z8OH78yOOCNwWQsCeoTwdn7cd2Qqd8ZKME5GsytBwShkxS3+ZS+cV6oQ==
Content-Type: multipart/alternative; 
	boundary="----=_Part_15534_1628508172.1712756547853"
MIME-Version: 1.0
Message-ID: <657599005.446205.1712756569339.JavaMail.root@mail-tracker-145-3ep34-c9h23-5f64cf7787-82gdh>
X-Coremail-Locale: zh_CN
X-NTES-TM-INF: aRIGHTkHd18Hd2huDjgHdjplRnx7CElyazpNLypISWZYU04VbjxvcBdTLmcsLFBcYhIcamNgLw
X-CM-TRANSID: KSIvCgC3rwBZlxZmGh8uAA--.497S2
X-Coremail-Antispam: 1Uf129KBjvAXoWftry3Xr1xKFWftw43Xry5urg_yoW8tF47Go
	WfJFyrJ3W8Gryxtw1DAF4xtFZxXa9Fk3Z5Jws8XFsIgasFyF17X39rJr45JF1Sga15KrWx
	ZF1jgwn3AFs7Kr1Un29KB7ZKAUJUUUU8529EdanIXcx71UUUUU7v73VFW2AGmfu7bjvjm3
	AaLaJ3UbIYCTnIWIevJa73UjIFyTuYvj4RJUUUUUUUU
X-Originating-IP: [10.131.138.72]
X-CM-SenderInfo: 5vhq20jurqiii6rwjhhfrp/
X-Mailman-Approved-At: Thu, 11 Apr 2024 08:13:29 +1000
X-BeenThere: linuxppc-dev@lists.ozlabs.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Linux on PowerPC Developers Mail List <linuxppc-dev.lists.ozlabs.org>
List-Unsubscribe: <https://lists.ozlabs.org/options/linuxppc-dev>,
 <mailto:linuxppc-dev-request@lists.ozlabs.org?subject=unsubscribe>
List-Archive: <http://lists.ozlabs.org/pipermail/linuxppc-dev/>
List-Post: <mailto:linuxppc-dev@lists.ozlabs.org>
List-Help: <mailto:linuxppc-dev-request@lists.ozlabs.org?subject=help>
List-Subscribe: <https://lists.ozlabs.org/listinfo/linuxppc-dev>,
 <mailto:linuxppc-dev-request@lists.ozlabs.org?subject=subscribe>
Cc: linux-pm@vger.kernel.org, linux-arm-msm@vger.kernel.org, linux-kernel@vger.kernel.org, linux-mediatek@lists.infradead.org, asahi@lists.linux.dev, linux-tegra@vger.kernel.org, linux-omap@vger.kernel.org, linuxppc-dev@lists.ozlabs.org, linux-arm-kernel@lists.infradead.org
Errors-To: linuxppc-dev-bounces+lists+linuxppc-dev=lfdr.de@lists.ozlabs.org
Sender: "Linuxppc-dev" <linuxppc-dev-bounces+lists+linuxppc-dev=lfdr.de@lists.ozlabs.org>

------=_Part_15534_1628508172.1712756547853
Content-Type: text/plain; charset=GBK
Content-Transfer-Encoding: base64

CgoKSGmjrAogICAgIEkgaGF2ZSBhbHJlYWR5IHRlc3RlZCBpdCwgaXQgaXMgZnVuY3Rpb25pbmcg
cHJvcGVybHksIFBsZWFzZSByZXZpZXcuCgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIExpemhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoYW5rcwog
ICAgIAoKCgoKCgoKCgoKCgoKCkF0IDIwMjQtMDQtMTAgMjE6MjI6NDcsICJMaXpoZSIgPHNlbnNv
cjEwMTBAMTYzLmNvbT4gd3JvdGU6Cj5Gb3IgdGhlIGV4aXQoKSBjYWxsYmFjayBmdW5jdGlvbiBy
ZXR1cm5pbmcgYW4gaW50IHR5cGUgdmFsdWUuCj50aGlzIGxlYWRzIG1hbnkgZHJpdmVyIGF1dGhv
cnMgbWlzdGFrZW5seSBiZWxpZXZpbmcgdGhhdCBlcnJvcgo+aGFuZGxpbmcgY2FuIGJlIHBlcmZv
cm1lZCBieSByZXR1cm5pbmcgYW4gZXJyb3IgY29kZS4gSG93ZXZlci4KPnRoZSByZXR1cm5lZCB2
YWx1ZSBpcyBpZ25vcmUsIGFuZCB0byBpbXByb3ZlIHRoaXMgc2l0dWF0aW9uLgo+aXQgaXMgcHJv
cG9zZWQgdG8gbW9kaWZ5IHRoZSByZXR1cm4gdHlwZSBvZiB0aGUgZXhpdCgpIGNhbGxiYWNrCj5m
dW5jdGlvbiB0byB2b2lkCj4KPlNpZ25lZC1vZmYtYnk6IExpemhlIDxzZW5zb3IxMDEwQDE2My5j
b20+Cj4tLS0KPiBkcml2ZXJzL2NwdWZyZXEvYWNwaS1jcHVmcmVxLmMgICAgICAgICB8IDQgKy0t
LQo+IGRyaXZlcnMvY3B1ZnJlcS9hbWQtcHN0YXRlLmMgICAgICAgICAgIHwgNyArKy0tLS0tCj4g
ZHJpdmVycy9jcHVmcmVxL2FwcGxlLXNvYy1jcHVmcmVxLmMgICAgfCA0ICstLS0KPiBkcml2ZXJz
L2NwdWZyZXEvYm1pcHMtY3B1ZnJlcS5jICAgICAgICB8IDQgKy0tLQo+IGRyaXZlcnMvY3B1ZnJl
cS9jcHBjX2NwdWZyZXEuYyAgICAgICAgIHwgMyArLS0KPiBkcml2ZXJzL2NwdWZyZXEvY3B1ZnJl
cS1kdC5jICAgICAgICAgICB8IDMgKy0tCj4gZHJpdmVycy9jcHVmcmVxL2VfcG93ZXJzYXZlci5j
ICAgICAgICAgfCAzICstLQo+IGRyaXZlcnMvY3B1ZnJlcS9pbnRlbF9wc3RhdGUuYyAgICAgICAg
IHwgNCArLS0tCj4gZHJpdmVycy9jcHVmcmVxL21lZGlhdGVrLWNwdWZyZXEtaHcuYyAgfCA0ICst
LS0KPiBkcml2ZXJzL2NwdWZyZXEvbWVkaWF0ZWstY3B1ZnJlcS5jICAgICB8IDQgKy0tLQo+IGRy
aXZlcnMvY3B1ZnJlcS9vbWFwLWNwdWZyZXEuYyAgICAgICAgIHwgMyArLS0KPiBkcml2ZXJzL2Nw
dWZyZXEvcGFzZW1pLWNwdWZyZXEuYyAgICAgICB8IDYgKystLS0tCj4gZHJpdmVycy9jcHVmcmVx
L3Bvd2Vybm93LWs2LmMgICAgICAgICAgfCAzICstLQo+IGRyaXZlcnMvY3B1ZnJlcS9wb3dlcm5v
dy1rNy5jICAgICAgICAgIHwgMyArLS0KPiBkcml2ZXJzL2NwdWZyZXEvcG93ZXJub3ctazguYyAg
ICAgICAgICB8IDQgKy0tLQo+IGRyaXZlcnMvY3B1ZnJlcS9wb3dlcm52LWNwdWZyZXEuYyAgICAg
IHwgNCArLS0tCj4gZHJpdmVycy9jcHVmcmVxL3BwY19jYmVfY3B1ZnJlcS5jICAgICAgfCAzICst
LQo+IGRyaXZlcnMvY3B1ZnJlcS9xY29tLWNwdWZyZXEtaHcuYyAgICAgIHwgNCArLS0tCj4gZHJp
dmVycy9jcHVmcmVxL3FvcmlxLWNwdWZyZXEuYyAgICAgICAgfCA0ICstLS0KPiBkcml2ZXJzL2Nw
dWZyZXEvc2NtaS1jcHVmcmVxLmMgICAgICAgICB8IDQgKy0tLQo+IGRyaXZlcnMvY3B1ZnJlcS9z
Y3BpLWNwdWZyZXEuYyAgICAgICAgIHwgNCArLS0tCj4gZHJpdmVycy9jcHVmcmVxL3NoLWNwdWZy
ZXEuYyAgICAgICAgICAgfCA0ICstLS0KPiBkcml2ZXJzL2NwdWZyZXEvc3BhcmMtdXMyZS1jcHVm
cmVxLmMgICB8IDMgKy0tCj4gZHJpdmVycy9jcHVmcmVxL3NwYXJjLXVzMy1jcHVmcmVxLmMgICAg
fCAzICstLQo+IGRyaXZlcnMvY3B1ZnJlcS9zcGVlZHN0ZXAtY2VudHJpbm8uYyAgIHwgNCArLS0t
Cj4gZHJpdmVycy9jcHVmcmVxL3RlZ3JhMTk0LWNwdWZyZXEuYyAgICAgfCA0ICstLS0KPiBkcml2
ZXJzL2NwdWZyZXEvdmV4cHJlc3Mtc3BjLWNwdWZyZXEuYyB8IDMgKy0tCj4gMjcgZmlsZXMgY2hh
bmdlZCwgMjkgaW5zZXJ0aW9ucygrKSwgNzQgZGVsZXRpb25zKC0pCj4KPmRpZmYgLS1naXQgYS9k
cml2ZXJzL2NwdWZyZXEvYWNwaS1jcHVmcmVxLmMgYi9kcml2ZXJzL2NwdWZyZXEvYWNwaS1jcHVm
cmVxLmMKPmluZGV4IDM3ZjFjZGY0NmQyOS4uMzNmMTgxNDBlOWE0IDEwMDY0NAo+LS0tIGEvZHJp
dmVycy9jcHVmcmVxL2FjcGktY3B1ZnJlcS5jCj4rKysgYi9kcml2ZXJzL2NwdWZyZXEvYWNwaS1j
cHVmcmVxLmMKPkBAIC05MDYsNyArOTA2LDcgQEAgc3RhdGljIGludCBhY3BpX2NwdWZyZXFfY3B1
X2luaXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gCXJldHVybiByZXN1bHQ7Cj4g
fQo+IAo+LXN0YXRpYyBpbnQgYWNwaV9jcHVmcmVxX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3Bv
bGljeSAqcG9saWN5KQo+K3N0YXRpYyB2b2lkIGFjcGlfY3B1ZnJlcV9jcHVfZXhpdChzdHJ1Y3Qg
Y3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7Cj4gCXN0cnVjdCBhY3BpX2NwdWZyZXFfZGF0YSAq
ZGF0YSA9IHBvbGljeS0+ZHJpdmVyX2RhdGE7Cj4gCj5AQCAtOTE5LDggKzkxOSw2IEBAIHN0YXRp
YyBpbnQgYWNwaV9jcHVmcmVxX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5
KQo+IAlmcmVlX2NwdW1hc2tfdmFyKGRhdGEtPmZyZXFkb21haW5fY3B1cyk7Cj4gCWtmcmVlKHBv
bGljeS0+ZnJlcV90YWJsZSk7Cj4gCWtmcmVlKGRhdGEpOwo+LQo+LQlyZXR1cm4gMDsKPiB9Cj4g
Cj4gc3RhdGljIGludCBhY3BpX2NwdWZyZXFfcmVzdW1lKHN0cnVjdCBjcHVmcmVxX3BvbGljeSAq
cG9saWN5KQo+ZGlmZiAtLWdpdCBhL2RyaXZlcnMvY3B1ZnJlcS9hbWQtcHN0YXRlLmMgYi9kcml2
ZXJzL2NwdWZyZXEvYW1kLXBzdGF0ZS5jCj5pbmRleCAyMDE1YzlmY2MzYzkuLjYwYjNkMjBkNTkz
OSAxMDA2NDQKPi0tLSBhL2RyaXZlcnMvY3B1ZnJlcS9hbWQtcHN0YXRlLmMKPisrKyBiL2RyaXZl
cnMvY3B1ZnJlcS9hbWQtcHN0YXRlLmMKPkBAIC05MTksNyArOTE5LDcgQEAgc3RhdGljIGludCBh
bWRfcHN0YXRlX2NwdV9pbml0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAlyZXR1
cm4gcmV0Owo+IH0KPiAKPi1zdGF0aWMgaW50IGFtZF9wc3RhdGVfY3B1X2V4aXQoc3RydWN0IGNw
dWZyZXFfcG9saWN5ICpwb2xpY3kpCj4rc3RhdGljIHZvaWQgYW1kX3BzdGF0ZV9jcHVfZXhpdChz
dHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7Cj4gCXN0cnVjdCBhbWRfY3B1ZGF0YSAq
Y3B1ZGF0YSA9IHBvbGljeS0+ZHJpdmVyX2RhdGE7Cj4gCj5AQCAtOTI3LDggKzkyNyw2IEBAIHN0
YXRpYyBpbnQgYW1kX3BzdGF0ZV9jcHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGlj
eSkKPiAJZnJlcV9xb3NfcmVtb3ZlX3JlcXVlc3QoJmNwdWRhdGEtPnJlcVswXSk7Cj4gCXBvbGlj
eS0+ZmFzdF9zd2l0Y2hfcG9zc2libGUgPSBmYWxzZTsKPiAJa2ZyZWUoY3B1ZGF0YSk7Cj4tCj4t
CXJldHVybiAwOwo+IH0KPiAKPiBzdGF0aWMgaW50IGFtZF9wc3RhdGVfY3B1X3Jlc3VtZShzdHJ1
Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPkBAIC0xMzc2LDEwICsxMzc0LDkgQEAgc3RhdGlj
IGludCBhbWRfcHN0YXRlX2VwcF9jcHVfaW5pdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGlj
eSkKPiAJcmV0dXJuIHJldDsKPiB9Cj4gCj4tc3RhdGljIGludCBhbWRfcHN0YXRlX2VwcF9jcHVf
ZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPitzdGF0aWMgdm9pZCBhbWRfcHN0
YXRlX2VwcF9jcHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7Cj4gCXBy
X2RlYnVnKCJDUFUgJWQgZXhpdGluZ1xuIiwgcG9saWN5LT5jcHUpOwo+LQlyZXR1cm4gMDsKPiB9
Cj4gCj4gc3RhdGljIHZvaWQgYW1kX3BzdGF0ZV9lcHBfdXBkYXRlX2xpbWl0KHN0cnVjdCBjcHVm
cmVxX3BvbGljeSAqcG9saWN5KQo+ZGlmZiAtLWdpdCBhL2RyaXZlcnMvY3B1ZnJlcS9hcHBsZS1z
b2MtY3B1ZnJlcS5jIGIvZHJpdmVycy9jcHVmcmVxL2FwcGxlLXNvYy1jcHVmcmVxLmMKPmluZGV4
IDAyMWY0MjM3MDVlMS4uYWYzNGMyMmZhMjczIDEwMDY0NAo+LS0tIGEvZHJpdmVycy9jcHVmcmVx
L2FwcGxlLXNvYy1jcHVmcmVxLmMKPisrKyBiL2RyaXZlcnMvY3B1ZnJlcS9hcHBsZS1zb2MtY3B1
ZnJlcS5jCj5AQCAtMzA1LDcgKzMwNSw3IEBAIHN0YXRpYyBpbnQgYXBwbGVfc29jX2NwdWZyZXFf
aW5pdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiAJcmV0dXJuIHJldDsKPiB9Cj4g
Cj4tc3RhdGljIGludCBhcHBsZV9zb2NfY3B1ZnJlcV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGlj
eSAqcG9saWN5KQo+K3N0YXRpYyB2b2lkIGFwcGxlX3NvY19jcHVmcmVxX2V4aXQoc3RydWN0IGNw
dWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gewo+IAlzdHJ1Y3QgYXBwbGVfY3B1X3ByaXYgKnByaXYg
PSBwb2xpY3ktPmRyaXZlcl9kYXRhOwo+IAo+QEAgLTMxMyw4ICszMTMsNiBAQCBzdGF0aWMgaW50
IGFwcGxlX3NvY19jcHVmcmVxX2V4aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4g
CWRldl9wbV9vcHBfcmVtb3ZlX2FsbF9keW5hbWljKHByaXYtPmNwdV9kZXYpOwo+IAlpb3VubWFw
KHByaXYtPnJlZ19iYXNlKTsKPiAJa2ZyZWUocHJpdik7Cj4tCj4tCXJldHVybiAwOwo+IH0KPiAK
PiBzdGF0aWMgc3RydWN0IGNwdWZyZXFfZHJpdmVyIGFwcGxlX3NvY19jcHVmcmVxX2RyaXZlciA9
IHsKPmRpZmYgLS1naXQgYS9kcml2ZXJzL2NwdWZyZXEvYm1pcHMtY3B1ZnJlcS5jIGIvZHJpdmVy
cy9jcHVmcmVxL2JtaXBzLWNwdWZyZXEuYwo+aW5kZXggMzkyMjFhOWExODdhLi4xN2E0YzE3NDU1
M2QgMTAwNjQ0Cj4tLS0gYS9kcml2ZXJzL2NwdWZyZXEvYm1pcHMtY3B1ZnJlcS5jCj4rKysgYi9k
cml2ZXJzL2NwdWZyZXEvYm1pcHMtY3B1ZnJlcS5jCj5AQCAtMTIxLDExICsxMjEsOSBAQCBzdGF0
aWMgaW50IGJtaXBzX2NwdWZyZXFfdGFyZ2V0X2luZGV4KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAq
cG9saWN5LAo+IAlyZXR1cm4gMDsKPiB9Cj4gCj4tc3RhdGljIGludCBibWlwc19jcHVmcmVxX2V4
aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4rc3RhdGljIHZvaWQgYm1pcHNfY3B1
ZnJlcV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IHsKPiAJa2ZyZWUocG9s
aWN5LT5mcmVxX3RhYmxlKTsKPi0KPi0JcmV0dXJuIDA7Cj4gfQo+IAo+IHN0YXRpYyBpbnQgYm1p
cHNfY3B1ZnJlcV9pbml0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+ZGlmZiAtLWdp
dCBhL2RyaXZlcnMvY3B1ZnJlcS9jcHBjX2NwdWZyZXEuYyBiL2RyaXZlcnMvY3B1ZnJlcS9jcHBj
X2NwdWZyZXEuYwo+aW5kZXggNjQ0MjBkOWNmZDFlLi5kY2NiOWMxZjA4N2QgMTAwNjQ0Cj4tLS0g
YS9kcml2ZXJzL2NwdWZyZXEvY3BwY19jcHVmcmVxLmMKPisrKyBiL2RyaXZlcnMvY3B1ZnJlcS9j
cHBjX2NwdWZyZXEuYwo+QEAgLTY4OCw3ICs2ODgsNyBAQCBzdGF0aWMgaW50IGNwcGNfY3B1ZnJl
cV9jcHVfaW5pdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiAJcmV0dXJuIHJldDsK
PiB9Cj4gCj4tc3RhdGljIGludCBjcHBjX2NwdWZyZXFfY3B1X2V4aXQoc3RydWN0IGNwdWZyZXFf
cG9saWN5ICpwb2xpY3kpCj4rc3RhdGljIHZvaWQgY3BwY19jcHVmcmVxX2NwdV9leGl0KHN0cnVj
dCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IHsKPiAJc3RydWN0IGNwcGNfY3B1ZGF0YSAqY3B1
X2RhdGEgPSBwb2xpY3ktPmRyaXZlcl9kYXRhOwo+IAlzdHJ1Y3QgY3BwY19wZXJmX2NhcHMgKmNh
cHMgPSAmY3B1X2RhdGEtPnBlcmZfY2FwczsKPkBAIC03MDUsNyArNzA1LDYgQEAgc3RhdGljIGlu
dCBjcHBjX2NwdWZyZXFfY3B1X2V4aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4g
CQkJIGNhcHMtPmxvd2VzdF9wZXJmLCBjcHUsIHJldCk7Cj4gCj4gCWNwcGNfY3B1ZnJlcV9wdXRf
Y3B1X2RhdGEocG9saWN5KTsKPi0JcmV0dXJuIDA7Cj4gfQo+IAo+IHN0YXRpYyBpbmxpbmUgdTY0
IGdldF9kZWx0YSh1NjQgdDEsIHU2NCB0MCkKPmRpZmYgLS1naXQgYS9kcml2ZXJzL2NwdWZyZXEv
Y3B1ZnJlcS1kdC5jIGIvZHJpdmVycy9jcHVmcmVxL2NwdWZyZXEtZHQuYwo+aW5kZXggMmQ4M2Ji
YzY1ZGQwLi5lYWYwMjU3OWVhNzQgMTAwNjQ0Cj4tLS0gYS9kcml2ZXJzL2NwdWZyZXEvY3B1ZnJl
cS1kdC5jCj4rKysgYi9kcml2ZXJzL2NwdWZyZXEvY3B1ZnJlcS1kdC5jCj5AQCAtMTY2LDEwICsx
NjYsOSBAQCBzdGF0aWMgaW50IGNwdWZyZXFfb2ZmbGluZShzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kg
KnBvbGljeSkKPiAJcmV0dXJuIDA7Cj4gfQo+IAo+LXN0YXRpYyBpbnQgY3B1ZnJlcV9leGl0KHN0
cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+K3N0YXRpYyB2b2lkIGNwdWZyZXFfZXhpdChz
dHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7Cj4gCWNsa19wdXQocG9saWN5LT5jbGsp
Owo+LQlyZXR1cm4gMDsKPiB9Cj4gCj4gc3RhdGljIHN0cnVjdCBjcHVmcmVxX2RyaXZlciBkdF9j
cHVmcmVxX2RyaXZlciA9IHsKPmRpZmYgLS1naXQgYS9kcml2ZXJzL2NwdWZyZXEvZV9wb3dlcnNh
dmVyLmMgYi9kcml2ZXJzL2NwdWZyZXEvZV9wb3dlcnNhdmVyLmMKPmluZGV4IGFiOTNiY2U4YWU3
Ny4uNmU5NThiMDllMWI1IDEwMDY0NAo+LS0tIGEvZHJpdmVycy9jcHVmcmVxL2VfcG93ZXJzYXZl
ci5jCj4rKysgYi9kcml2ZXJzL2NwdWZyZXEvZV9wb3dlcnNhdmVyLmMKPkBAIC0zNjAsMTQgKzM2
MCwxMyBAQCBzdGF0aWMgaW50IGVwc19jcHVfaW5pdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBv
bGljeSkKPiAJcmV0dXJuIDA7Cj4gfQo+IAo+LXN0YXRpYyBpbnQgZXBzX2NwdV9leGl0KHN0cnVj
dCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+K3N0YXRpYyB2b2lkIGVwc19jcHVfZXhpdChzdHJ1
Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7Cj4gCXVuc2lnbmVkIGludCBjcHUgPSBwb2xp
Y3ktPmNwdTsKPiAKPiAJLyogQnllICovCj4gCWtmcmVlKGVwc19jcHVbY3B1XSk7Cj4gCWVwc19j
cHVbY3B1XSA9IE5VTEw7Cj4tCXJldHVybiAwOwo+IH0KPiAKPiBzdGF0aWMgc3RydWN0IGNwdWZy
ZXFfZHJpdmVyIGVwc19kcml2ZXIgPSB7Cj5kaWZmIC0tZ2l0IGEvZHJpdmVycy9jcHVmcmVxL2lu
dGVsX3BzdGF0ZS5jIGIvZHJpdmVycy9jcHVmcmVxL2ludGVsX3BzdGF0ZS5jCj5pbmRleCBkYmJm
Mjk5ZjQyMTkuLmFhNDM1ZDI0YzIwZSAxMDA2NDQKPi0tLSBhL2RyaXZlcnMvY3B1ZnJlcS9pbnRl
bF9wc3RhdGUuYwo+KysrIGIvZHJpdmVycy9jcHVmcmVxL2ludGVsX3BzdGF0ZS5jCj5AQCAtMjcz
MSwxMyArMjczMSwxMSBAQCBzdGF0aWMgaW50IGludGVsX3BzdGF0ZV9jcHVfb2ZmbGluZShzdHJ1
Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiAJcmV0dXJuIGludGVsX2NwdWZyZXFfY3B1X29m
ZmxpbmUocG9saWN5KTsKPiB9Cj4gCj4tc3RhdGljIGludCBpbnRlbF9wc3RhdGVfY3B1X2V4aXQo
c3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4rc3RhdGljIHZvaWQgaW50ZWxfcHN0YXRl
X2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IHsKPiAJcHJfZGVidWco
IkNQVSAlZCBleGl0aW5nXG4iLCBwb2xpY3ktPmNwdSk7Cj4gCj4gCXBvbGljeS0+ZmFzdF9zd2l0
Y2hfcG9zc2libGUgPSBmYWxzZTsKPi0KPi0JcmV0dXJuIDA7Cj4gfQo+IAo+IHN0YXRpYyBpbnQg
X19pbnRlbF9wc3RhdGVfY3B1X2luaXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj5k
aWZmIC0tZ2l0IGEvZHJpdmVycy9jcHVmcmVxL21lZGlhdGVrLWNwdWZyZXEtaHcuYyBiL2RyaXZl
cnMvY3B1ZnJlcS9tZWRpYXRlay1jcHVmcmVxLWh3LmMKPmluZGV4IDhkMDk3ZGNkZGRhNC4uODky
NWUwOTZkNWI5IDEwMDY0NAo+LS0tIGEvZHJpdmVycy9jcHVmcmVxL21lZGlhdGVrLWNwdWZyZXEt
aHcuYwo+KysrIGIvZHJpdmVycy9jcHVmcmVxL21lZGlhdGVrLWNwdWZyZXEtaHcuYwo+QEAgLTI2
MCw3ICsyNjAsNyBAQCBzdGF0aWMgaW50IG10a19jcHVmcmVxX2h3X2NwdV9pbml0KHN0cnVjdCBj
cHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAlyZXR1cm4gMDsKPiB9Cj4gCj4tc3RhdGljIGludCBt
dGtfY3B1ZnJlcV9od19jcHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPitz
dGF0aWMgdm9pZCBtdGtfY3B1ZnJlcV9od19jcHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kg
KnBvbGljeSkKPiB7Cj4gCXN0cnVjdCBtdGtfY3B1ZnJlcV9kYXRhICpkYXRhID0gcG9saWN5LT5k
cml2ZXJfZGF0YTsKPiAJc3RydWN0IHJlc291cmNlICpyZXMgPSBkYXRhLT5yZXM7Cj5AQCAtMjcw
LDggKzI3MCw2IEBAIHN0YXRpYyBpbnQgbXRrX2NwdWZyZXFfaHdfY3B1X2V4aXQoc3RydWN0IGNw
dWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gCXdyaXRlbF9yZWxheGVkKDB4MCwgZGF0YS0+cmVnX2Jh
c2VzW1JFR19GUkVRX0VOQUJMRV0pOwo+IAlpb3VubWFwKGJhc2UpOwo+IAlyZWxlYXNlX21lbV9y
ZWdpb24ocmVzLT5zdGFydCwgcmVzb3VyY2Vfc2l6ZShyZXMpKTsKPi0KPi0JcmV0dXJuIDA7Cj4g
fQo+IAo+IHN0YXRpYyB2b2lkIG10a19jcHVmcmVxX3JlZ2lzdGVyX2VtKHN0cnVjdCBjcHVmcmVx
X3BvbGljeSAqcG9saWN5KQo+ZGlmZiAtLWdpdCBhL2RyaXZlcnMvY3B1ZnJlcS9tZWRpYXRlay1j
cHVmcmVxLmMgYi9kcml2ZXJzL2NwdWZyZXEvbWVkaWF0ZWstY3B1ZnJlcS5jCj5pbmRleCBhMGE2
MTkxOWJjNGMuLmFiYTM0ZmI3OTQ4ZSAxMDA2NDQKPi0tLSBhL2RyaXZlcnMvY3B1ZnJlcS9tZWRp
YXRlay1jcHVmcmVxLmMKPisrKyBiL2RyaXZlcnMvY3B1ZnJlcS9tZWRpYXRlay1jcHVmcmVxLmMK
PkBAIC01OTksMTMgKzU5OSwxMSBAQCBzdGF0aWMgaW50IG10a19jcHVmcmVxX2luaXQoc3RydWN0
IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gCXJldHVybiAwOwo+IH0KPiAKPi1zdGF0aWMgaW50
IG10a19jcHVmcmVxX2V4aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4rc3RhdGlj
IHZvaWQgbXRrX2NwdWZyZXFfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7
Cj4gCXN0cnVjdCBtdGtfY3B1X2R2ZnNfaW5mbyAqaW5mbyA9IHBvbGljeS0+ZHJpdmVyX2RhdGE7
Cj4gCj4gCWRldl9wbV9vcHBfZnJlZV9jcHVmcmVxX3RhYmxlKGluZm8tPmNwdV9kZXYsICZwb2xp
Y3ktPmZyZXFfdGFibGUpOwo+LQo+LQlyZXR1cm4gMDsKPiB9Cj4gCj4gc3RhdGljIHN0cnVjdCBj
cHVmcmVxX2RyaXZlciBtdGtfY3B1ZnJlcV9kcml2ZXIgPSB7Cj5kaWZmIC0tZ2l0IGEvZHJpdmVy
cy9jcHVmcmVxL29tYXAtY3B1ZnJlcS5jIGIvZHJpdmVycy9jcHVmcmVxL29tYXAtY3B1ZnJlcS5j
Cj5pbmRleCA4OTU2OTA4NTY2NjUuLjM0NThkNWNjOWI3ZiAxMDA2NDQKPi0tLSBhL2RyaXZlcnMv
Y3B1ZnJlcS9vbWFwLWNwdWZyZXEuYwo+KysrIGIvZHJpdmVycy9jcHVmcmVxL29tYXAtY3B1ZnJl
cS5jCj5AQCAtMTM1LDExICsxMzUsMTAgQEAgc3RhdGljIGludCBvbWFwX2NwdV9pbml0KHN0cnVj
dCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAlyZXR1cm4gMDsKPiB9Cj4gCj4tc3RhdGljIGlu
dCBvbWFwX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+K3N0YXRpYyB2
b2lkIG9tYXBfY3B1X2V4aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gewo+IAlm
cmVxX3RhYmxlX2ZyZWUoKTsKPiAJY2xrX3B1dChwb2xpY3ktPmNsayk7Cj4tCXJldHVybiAwOwo+
IH0KPiAKPiBzdGF0aWMgc3RydWN0IGNwdWZyZXFfZHJpdmVyIG9tYXBfZHJpdmVyID0gewo+ZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvY3B1ZnJlcS9wYXNlbWktY3B1ZnJlcS5jIGIvZHJpdmVycy9jcHVm
cmVxL3Bhc2VtaS1jcHVmcmVxLmMKPmluZGV4IDAzOWE2NmJiZTFiZS4uZWU5MjViNTNiNmI5IDEw
MDY0NAo+LS0tIGEvZHJpdmVycy9jcHVmcmVxL3Bhc2VtaS1jcHVmcmVxLmMKPisrKyBiL2RyaXZl
cnMvY3B1ZnJlcS9wYXNlbWktY3B1ZnJlcS5jCj5AQCAtMjA0LDIxICsyMDQsMTkgQEAgc3RhdGlj
IGludCBwYXNfY3B1ZnJlcV9jcHVfaW5pdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkK
PiAJcmV0dXJuIGVycjsKPiB9Cj4gCj4tc3RhdGljIGludCBwYXNfY3B1ZnJlcV9jcHVfZXhpdChz
dHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPitzdGF0aWMgdm9pZCBwYXNfY3B1ZnJlcV9j
cHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7Cj4gCS8qCj4gCSAqIFdl
IGRvbid0IHN1cHBvcnQgQ1BVIGhvdHBsdWcuIERvbid0IHVubWFwIGFmdGVyIHRoZSBzeXN0ZW0K
PiAJICogaGFzIGFscmVhZHkgbWFkZSBpdCB0byBhIHJ1bm5pbmcgc3RhdGUuCj4gCSAqLwo+IAlp
ZiAoc3lzdGVtX3N0YXRlID49IFNZU1RFTV9SVU5OSU5HKQo+LQkJcmV0dXJuIDA7Cj4rCQlyZXR1
cm47Cj4gCj4gCWlmIChzZGNhc3JfbWFwYmFzZSkKPiAJCWlvdW5tYXAoc2RjYXNyX21hcGJhc2Up
Owo+IAlpZiAoc2RjcHdyX21hcGJhc2UpCj4gCQlpb3VubWFwKHNkY3B3cl9tYXBiYXNlKTsKPi0K
Pi0JcmV0dXJuIDA7Cj4gfQo+IAo+IHN0YXRpYyBpbnQgcGFzX2NwdWZyZXFfdGFyZ2V0KHN0cnVj
dCBjcHVmcmVxX3BvbGljeSAqcG9saWN5LAo+ZGlmZiAtLWdpdCBhL2RyaXZlcnMvY3B1ZnJlcS9w
b3dlcm5vdy1rNi5jIGIvZHJpdmVycy9jcHVmcmVxL3Bvd2Vybm93LWs2LmMKPmluZGV4IDQxZWVm
ZWY5NWQ4Ny4uMTU2YmVjNmM1NDIwIDEwMDY0NAo+LS0tIGEvZHJpdmVycy9jcHVmcmVxL3Bvd2Vy
bm93LWs2LmMKPisrKyBiL2RyaXZlcnMvY3B1ZnJlcS9wb3dlcm5vdy1rNi5jCj5AQCAtMjE5LDcg
KzIxOSw3IEBAIHN0YXRpYyBpbnQgcG93ZXJub3dfazZfY3B1X2luaXQoc3RydWN0IGNwdWZyZXFf
cG9saWN5ICpwb2xpY3kpCj4gfQo+IAo+IAo+LXN0YXRpYyBpbnQgcG93ZXJub3dfazZfY3B1X2V4
aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4rc3RhdGljIHZvaWQgcG93ZXJub3df
azZfY3B1X2V4aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gewo+IAl1bnNpZ25l
ZCBpbnQgaTsKPiAKPkBAIC0yMzcsNyArMjM3LDYgQEAgc3RhdGljIGludCBwb3dlcm5vd19rNl9j
cHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiAJCQlicmVhazsKPiAJCX0K
PiAJfQo+LQlyZXR1cm4gMDsKPiB9Cj4gCj4gc3RhdGljIHVuc2lnbmVkIGludCBwb3dlcm5vd19r
Nl9nZXQodW5zaWduZWQgaW50IGNwdSkKPmRpZmYgLS1naXQgYS9kcml2ZXJzL2NwdWZyZXEvcG93
ZXJub3ctazcuYyBiL2RyaXZlcnMvY3B1ZnJlcS9wb3dlcm5vdy1rNy5jCj5pbmRleCA1ZDUxNWZj
MzQ4MzYuLjQyNzE0NDZjODcyNSAxMDA2NDQKPi0tLSBhL2RyaXZlcnMvY3B1ZnJlcS9wb3dlcm5v
dy1rNy5jCj4rKysgYi9kcml2ZXJzL2NwdWZyZXEvcG93ZXJub3ctazcuYwo+QEAgLTY0NCw3ICs2
NDQsNyBAQCBzdGF0aWMgaW50IHBvd2Vybm93X2NwdV9pbml0KHN0cnVjdCBjcHVmcmVxX3BvbGlj
eSAqcG9saWN5KQo+IAlyZXR1cm4gMDsKPiB9Cj4gCj4tc3RhdGljIGludCBwb3dlcm5vd19jcHVf
ZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPitzdGF0aWMgdm9pZCBwb3dlcm5v
d19jcHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7Cj4gI2lmZGVmIENP
TkZJR19YODZfUE9XRVJOT1dfSzdfQUNQSQo+IAlpZiAoYWNwaV9wcm9jZXNzb3JfcGVyZikgewo+
QEAgLTY1NSw3ICs2NTUsNiBAQCBzdGF0aWMgaW50IHBvd2Vybm93X2NwdV9leGl0KHN0cnVjdCBj
cHVmcmVxX3BvbGljeSAqcG9saWN5KQo+ICNlbmRpZgo+IAo+IAlrZnJlZShwb3dlcm5vd190YWJs
ZSk7Cj4tCXJldHVybiAwOwo+IH0KPiAKPiBzdGF0aWMgc3RydWN0IGNwdWZyZXFfZHJpdmVyIHBv
d2Vybm93X2RyaXZlciA9IHsKPmRpZmYgLS1naXQgYS9kcml2ZXJzL2NwdWZyZXEvcG93ZXJub3ct
azguYyBiL2RyaXZlcnMvY3B1ZnJlcS9wb3dlcm5vdy1rOC5jCj5pbmRleCBiMTBmN2ExYjc3ZjEu
LjVlNjYzYzNhNjczNiAxMDA2NDQKPi0tLSBhL2RyaXZlcnMvY3B1ZnJlcS9wb3dlcm5vdy1rOC5j
Cj4rKysgYi9kcml2ZXJzL2NwdWZyZXEvcG93ZXJub3ctazguYwo+QEAgLTEwODksNyArMTA4OSw3
IEBAIHN0YXRpYyBpbnQgcG93ZXJub3drOF9jcHVfaW5pdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kg
KnBvbCkKPiAJcmV0dXJuIC1FTk9ERVY7Cj4gfQo+IAo+LXN0YXRpYyBpbnQgcG93ZXJub3drOF9j
cHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbCkKPitzdGF0aWMgdm9pZCBwb3dlcm5v
d2s4X2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9sKQo+IHsKPiAJc3RydWN0IHBv
d2Vybm93X2s4X2RhdGEgKmRhdGEgPSBwZXJfY3B1KHBvd2Vybm93X2RhdGEsIHBvbC0+Y3B1KTsK
PiAJaW50IGNwdTsKPkBAIC0xMTA0LDggKzExMDQsNiBAQCBzdGF0aWMgaW50IHBvd2Vybm93azhf
Y3B1X2V4aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2wpCj4gCS8qIHBvbC0+Y3B1cyB3aWxs
IGJlIGVtcHR5IGhlcmUsIHVzZSByZWxhdGVkX2NwdXMgaW5zdGVhZC4gKi8KPiAJZm9yX2VhY2hf
Y3B1KGNwdSwgcG9sLT5yZWxhdGVkX2NwdXMpCj4gCQlwZXJfY3B1KHBvd2Vybm93X2RhdGEsIGNw
dSkgPSBOVUxMOwo+LQo+LQlyZXR1cm4gMDsKPiB9Cj4gCj4gc3RhdGljIHZvaWQgcXVlcnlfdmFs
dWVzX29uX2NwdSh2b2lkICpfZXJyKQo+ZGlmZiAtLWdpdCBhL2RyaXZlcnMvY3B1ZnJlcS9wb3dl
cm52LWNwdWZyZXEuYyBiL2RyaXZlcnMvY3B1ZnJlcS9wb3dlcm52LWNwdWZyZXEuYwo+aW5kZXgg
ZmRkYmQxZWExNjM1Li41MGM2MjkyOWY3Y2EgMTAwNjQ0Cj4tLS0gYS9kcml2ZXJzL2NwdWZyZXEv
cG93ZXJudi1jcHVmcmVxLmMKPisrKyBiL2RyaXZlcnMvY3B1ZnJlcS9wb3dlcm52LWNwdWZyZXEu
Ywo+QEAgLTg3NCw3ICs4NzQsNyBAQCBzdGF0aWMgaW50IHBvd2VybnZfY3B1ZnJlcV9jcHVfaW5p
dChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiAJcmV0dXJuIDA7Cj4gfQo+IAo+LXN0
YXRpYyBpbnQgcG93ZXJudl9jcHVmcmVxX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAq
cG9saWN5KQo+K3N0YXRpYyB2b2lkIHBvd2VybnZfY3B1ZnJlcV9jcHVfZXhpdChzdHJ1Y3QgY3B1
ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7Cj4gCXN0cnVjdCBwb3dlcm52X3NtcF9jYWxsX2RhdGEg
ZnJlcV9kYXRhOwo+IAlzdHJ1Y3QgZ2xvYmFsX3BzdGF0ZV9pbmZvICpncHN0YXRlcyA9IHBvbGlj
eS0+ZHJpdmVyX2RhdGE7Cj5AQCAtODg2LDggKzg4Niw2IEBAIHN0YXRpYyBpbnQgcG93ZXJudl9j
cHVmcmVxX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAkJZGVsX3Rp
bWVyX3N5bmMoJmdwc3RhdGVzLT50aW1lcik7Cj4gCj4gCWtmcmVlKHBvbGljeS0+ZHJpdmVyX2Rh
dGEpOwo+LQo+LQlyZXR1cm4gMDsKPiB9Cj4gCj4gc3RhdGljIGludCBwb3dlcm52X2NwdWZyZXFf
cmVib290X25vdGlmaWVyKHN0cnVjdCBub3RpZmllcl9ibG9jayAqbmIsCj5kaWZmIC0tZ2l0IGEv
ZHJpdmVycy9jcHVmcmVxL3BwY19jYmVfY3B1ZnJlcS5jIGIvZHJpdmVycy9jcHVmcmVxL3BwY19j
YmVfY3B1ZnJlcS5jCj5pbmRleCA4OGFmYzQ5OTQxYjcuLjVlZTRjN2JmZGNjNSAxMDA2NDQKPi0t
LSBhL2RyaXZlcnMvY3B1ZnJlcS9wcGNfY2JlX2NwdWZyZXEuYwo+KysrIGIvZHJpdmVycy9jcHVm
cmVxL3BwY19jYmVfY3B1ZnJlcS5jCj5AQCAtMTEzLDEwICsxMTMsOSBAQCBzdGF0aWMgaW50IGNi
ZV9jcHVmcmVxX2NwdV9pbml0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAlyZXR1
cm4gMDsKPiB9Cj4gCj4tc3RhdGljIGludCBjYmVfY3B1ZnJlcV9jcHVfZXhpdChzdHJ1Y3QgY3B1
ZnJlcV9wb2xpY3kgKnBvbGljeSkKPitzdGF0aWMgdm9pZCBjYmVfY3B1ZnJlcV9jcHVfZXhpdChz
dHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiB7Cj4gCWNiZV9jcHVmcmVxX3BtaV9wb2xp
Y3lfZXhpdChwb2xpY3kpOwo+LQlyZXR1cm4gMDsKPiB9Cj4gCj4gc3RhdGljIGludCBjYmVfY3B1
ZnJlcV90YXJnZXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3ksCj5kaWZmIC0tZ2l0IGEv
ZHJpdmVycy9jcHVmcmVxL3Fjb20tY3B1ZnJlcS1ody5jIGIvZHJpdmVycy9jcHVmcmVxL3Fjb20t
Y3B1ZnJlcS1ody5jCj5pbmRleCA3MGIwZjIxOTY4YTAuLmJiODE4MTExMTYyZCAxMDA2NDQKPi0t
LSBhL2RyaXZlcnMvY3B1ZnJlcS9xY29tLWNwdWZyZXEtaHcuYwo+KysrIGIvZHJpdmVycy9jcHVm
cmVxL3Fjb20tY3B1ZnJlcS1ody5jCj5AQCAtNTczLDcgKzU3Myw3IEBAIHN0YXRpYyBpbnQgcWNv
bV9jcHVmcmVxX2h3X2NwdV9pbml0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAly
ZXR1cm4gcWNvbV9jcHVmcmVxX2h3X2xtaF9pbml0KHBvbGljeSwgaW5kZXgpOwo+IH0KPiAKPi1z
dGF0aWMgaW50IHFjb21fY3B1ZnJlcV9od19jcHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kg
KnBvbGljeSkKPitzdGF0aWMgdm9pZCBxY29tX2NwdWZyZXFfaHdfY3B1X2V4aXQoc3RydWN0IGNw
dWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gewo+IAlzdHJ1Y3QgZGV2aWNlICpjcHVfZGV2ID0gZ2V0
X2NwdV9kZXZpY2UocG9saWN5LT5jcHUpOwo+IAlzdHJ1Y3QgcWNvbV9jcHVmcmVxX2RhdGEgKmRh
dGEgPSBwb2xpY3ktPmRyaXZlcl9kYXRhOwo+QEAgLTU4Myw4ICs1ODMsNiBAQCBzdGF0aWMgaW50
IHFjb21fY3B1ZnJlcV9od19jcHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkK
PiAJcWNvbV9jcHVmcmVxX2h3X2xtaF9leGl0KGRhdGEpOwo+IAlrZnJlZShwb2xpY3ktPmZyZXFf
dGFibGUpOwo+IAlrZnJlZShkYXRhKTsKPi0KPi0JcmV0dXJuIDA7Cj4gfQo+IAo+IHN0YXRpYyB2
b2lkIHFjb21fY3B1ZnJlcV9yZWFkeShzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPmRp
ZmYgLS1naXQgYS9kcml2ZXJzL2NwdWZyZXEvcW9yaXEtY3B1ZnJlcS5jIGIvZHJpdmVycy9jcHVm
cmVxL3FvcmlxLWNwdWZyZXEuYwo+aW5kZXggMGFlY2FlY2JiMGU2Li4zNTE5YmYzNGQzOTcgMTAw
NjQ0Cj4tLS0gYS9kcml2ZXJzL2NwdWZyZXEvcW9yaXEtY3B1ZnJlcS5jCj4rKysgYi9kcml2ZXJz
L2NwdWZyZXEvcW9yaXEtY3B1ZnJlcS5jCj5AQCAtMjI1LDcgKzIyNSw3IEBAIHN0YXRpYyBpbnQg
cW9yaXFfY3B1ZnJlcV9jcHVfaW5pdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiAJ
cmV0dXJuIC1FTk9ERVY7Cj4gfQo+IAo+LXN0YXRpYyBpbnQgcW9yaXFfY3B1ZnJlcV9jcHVfZXhp
dChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPitzdGF0aWMgdm9pZCBxb3JpcV9jcHVm
cmVxX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IHsKPiAJc3RydWN0
IGNwdV9kYXRhICpkYXRhID0gcG9saWN5LT5kcml2ZXJfZGF0YTsKPiAKPkBAIC0yMzMsOCArMjMz
LDYgQEAgc3RhdGljIGludCBxb3JpcV9jcHVmcmVxX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3Bv
bGljeSAqcG9saWN5KQo+IAlrZnJlZShkYXRhLT50YWJsZSk7Cj4gCWtmcmVlKGRhdGEpOwo+IAlw
b2xpY3ktPmRyaXZlcl9kYXRhID0gTlVMTDsKPi0KPi0JcmV0dXJuIDA7Cj4gfQo+IAo+IHN0YXRp
YyBpbnQgcW9yaXFfY3B1ZnJlcV90YXJnZXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3ks
Cj5kaWZmIC0tZ2l0IGEvZHJpdmVycy9jcHVmcmVxL3NjbWktY3B1ZnJlcS5jIGIvZHJpdmVycy9j
cHVmcmVxL3NjbWktY3B1ZnJlcS5jCj5pbmRleCAzYjRmNmJmYjJmNGMuLmJmNWYxN2YwZGZiMSAx
MDA2NDQKPi0tLSBhL2RyaXZlcnMvY3B1ZnJlcS9zY21pLWNwdWZyZXEuYwo+KysrIGIvZHJpdmVy
cy9jcHVmcmVxL3NjbWktY3B1ZnJlcS5jCj5AQCAtMzA4LDcgKzMwOCw3IEBAIHN0YXRpYyBpbnQg
c2NtaV9jcHVmcmVxX2luaXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gCXJldHVy
biByZXQ7Cj4gfQo+IAo+LXN0YXRpYyBpbnQgc2NtaV9jcHVmcmVxX2V4aXQoc3RydWN0IGNwdWZy
ZXFfcG9saWN5ICpwb2xpY3kpCj4rc3RhdGljIHZvaWQgc2NtaV9jcHVmcmVxX2V4aXQoc3RydWN0
IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gewo+IAlzdHJ1Y3Qgc2NtaV9kYXRhICpwcml2ID0g
cG9saWN5LT5kcml2ZXJfZGF0YTsKPiAKPkBAIC0zMTYsOCArMzE2LDYgQEAgc3RhdGljIGludCBz
Y21pX2NwdWZyZXFfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBvbGljeSkKPiAJZGV2X3Bt
X29wcF9yZW1vdmVfYWxsX2R5bmFtaWMocHJpdi0+Y3B1X2Rldik7Cj4gCWZyZWVfY3B1bWFza192
YXIocHJpdi0+b3BwX3NoYXJlZF9jcHVzKTsKPiAJa2ZyZWUocHJpdik7Cj4tCj4tCXJldHVybiAw
Owo+IH0KPiAKPiBzdGF0aWMgdm9pZCBzY21pX2NwdWZyZXFfcmVnaXN0ZXJfZW0oc3RydWN0IGNw
dWZyZXFfcG9saWN5ICpwb2xpY3kpCj5kaWZmIC0tZ2l0IGEvZHJpdmVycy9jcHVmcmVxL3NjcGkt
Y3B1ZnJlcS5jIGIvZHJpdmVycy9jcHVmcmVxL3NjcGktY3B1ZnJlcS5jCj5pbmRleCBkMzNiZTU2
OTgzZWQuLjhkNzNlNmU4YmUyYSAxMDA2NDQKPi0tLSBhL2RyaXZlcnMvY3B1ZnJlcS9zY3BpLWNw
dWZyZXEuYwo+KysrIGIvZHJpdmVycy9jcHVmcmVxL3NjcGktY3B1ZnJlcS5jCj5AQCAtMTY3LDcg
KzE2Nyw3IEBAIHN0YXRpYyBpbnQgc2NwaV9jcHVmcmVxX2luaXQoc3RydWN0IGNwdWZyZXFfcG9s
aWN5ICpwb2xpY3kpCj4gCXJldHVybiByZXQ7Cj4gfQo+IAo+LXN0YXRpYyBpbnQgc2NwaV9jcHVm
cmVxX2V4aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4rc3RhdGljIHZvaWQgc2Nw
aV9jcHVmcmVxX2V4aXQoc3RydWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gewo+IAlzdHJ1
Y3Qgc2NwaV9kYXRhICpwcml2ID0gcG9saWN5LT5kcml2ZXJfZGF0YTsKPiAKPkBAIC0xNzUsOCAr
MTc1LDYgQEAgc3RhdGljIGludCBzY3BpX2NwdWZyZXFfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xp
Y3kgKnBvbGljeSkKPiAJZGV2X3BtX29wcF9mcmVlX2NwdWZyZXFfdGFibGUocHJpdi0+Y3B1X2Rl
diwgJnBvbGljeS0+ZnJlcV90YWJsZSk7Cj4gCWRldl9wbV9vcHBfcmVtb3ZlX2FsbF9keW5hbWlj
KHByaXYtPmNwdV9kZXYpOwo+IAlrZnJlZShwcml2KTsKPi0KPi0JcmV0dXJuIDA7Cj4gfQo+IAo+
IHN0YXRpYyBzdHJ1Y3QgY3B1ZnJlcV9kcml2ZXIgc2NwaV9jcHVmcmVxX2RyaXZlciA9IHsKPmRp
ZmYgLS1naXQgYS9kcml2ZXJzL2NwdWZyZXEvc2gtY3B1ZnJlcS5jIGIvZHJpdmVycy9jcHVmcmVx
L3NoLWNwdWZyZXEuYwo+aW5kZXggYjg3MDQyMzJjMjdiLi5hYTc0MDM2ZDA0MjAgMTAwNjQ0Cj4t
LS0gYS9kcml2ZXJzL2NwdWZyZXEvc2gtY3B1ZnJlcS5jCj4rKysgYi9kcml2ZXJzL2NwdWZyZXEv
c2gtY3B1ZnJlcS5jCj5AQCAtMTM1LDE0ICsxMzUsMTIgQEAgc3RhdGljIGludCBzaF9jcHVmcmVx
X2NwdV9pbml0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAlyZXR1cm4gMDsKPiB9
Cj4gCj4tc3RhdGljIGludCBzaF9jcHVmcmVxX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGlj
eSAqcG9saWN5KQo+K3N0YXRpYyB2b2lkIHNoX2NwdWZyZXFfY3B1X2V4aXQoc3RydWN0IGNwdWZy
ZXFfcG9saWN5ICpwb2xpY3kpCj4gewo+IAl1bnNpZ25lZCBpbnQgY3B1ID0gcG9saWN5LT5jcHU7
Cj4gCXN0cnVjdCBjbGsgKmNwdWNsayA9ICZwZXJfY3B1KHNoX2NwdWNsaywgY3B1KTsKPiAKPiAJ
Y2xrX3B1dChjcHVjbGspOwo+LQo+LQlyZXR1cm4gMDsKPiB9Cj4gCj4gc3RhdGljIHN0cnVjdCBj
cHVmcmVxX2RyaXZlciBzaF9jcHVmcmVxX2RyaXZlciA9IHsKPmRpZmYgLS1naXQgYS9kcml2ZXJz
L2NwdWZyZXEvc3BhcmMtdXMyZS1jcHVmcmVxLmMgYi9kcml2ZXJzL2NwdWZyZXEvc3BhcmMtdXMy
ZS1jcHVmcmVxLmMKPmluZGV4IDI3ODNkM2Q1NWZjZS4uOGEwY2Q1MzEyYTU5IDEwMDY0NAo+LS0t
IGEvZHJpdmVycy9jcHVmcmVxL3NwYXJjLXVzMmUtY3B1ZnJlcS5jCj4rKysgYi9kcml2ZXJzL2Nw
dWZyZXEvc3BhcmMtdXMyZS1jcHVmcmVxLmMKPkBAIC0yOTYsMTAgKzI5Niw5IEBAIHN0YXRpYyBp
bnQgdXMyZV9mcmVxX2NwdV9pbml0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAly
ZXR1cm4gMDsKPiB9Cj4gCj4tc3RhdGljIGludCB1czJlX2ZyZXFfY3B1X2V4aXQoc3RydWN0IGNw
dWZyZXFfcG9saWN5ICpwb2xpY3kpCj4rc3RhdGljIHZvaWQgdXMyZV9mcmVxX2NwdV9leGl0KHN0
cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IHsKPiAJdXMyZV9mcmVxX3RhcmdldChwb2xp
Y3ksIDApOwo+LQlyZXR1cm4gMDsKPiB9Cj4gCj4gc3RhdGljIHN0cnVjdCBjcHVmcmVxX2RyaXZl
ciBjcHVmcmVxX3VzMmVfZHJpdmVyID0gewo+ZGlmZiAtLWdpdCBhL2RyaXZlcnMvY3B1ZnJlcS9z
cGFyYy11czMtY3B1ZnJlcS5jIGIvZHJpdmVycy9jcHVmcmVxL3NwYXJjLXVzMy1jcHVmcmVxLmMK
PmluZGV4IDZjMzY1NzY3OWE4OC4uYjUwZjlkMTNlNmQyIDEwMDY0NAo+LS0tIGEvZHJpdmVycy9j
cHVmcmVxL3NwYXJjLXVzMy1jcHVmcmVxLmMKPisrKyBiL2RyaXZlcnMvY3B1ZnJlcS9zcGFyYy11
czMtY3B1ZnJlcS5jCj5AQCAtMTQwLDEwICsxNDAsOSBAQCBzdGF0aWMgaW50IHVzM19mcmVxX2Nw
dV9pbml0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAlyZXR1cm4gMDsKPiB9Cj4g
Cj4tc3RhdGljIGludCB1czNfZnJlcV9jcHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xpY3kgKnBv
bGljeSkKPitzdGF0aWMgdm9pZCB1czNfZnJlcV9jcHVfZXhpdChzdHJ1Y3QgY3B1ZnJlcV9wb2xp
Y3kgKnBvbGljeSkKPiB7Cj4gCXVzM19mcmVxX3RhcmdldChwb2xpY3ksIDApOwo+LQlyZXR1cm4g
MDsKPiB9Cj4gCj4gc3RhdGljIHN0cnVjdCBjcHVmcmVxX2RyaXZlciBjcHVmcmVxX3VzM19kcml2
ZXIgPSB7Cj5kaWZmIC0tZ2l0IGEvZHJpdmVycy9jcHVmcmVxL3NwZWVkc3RlcC1jZW50cmluby5j
IGIvZHJpdmVycy9jcHVmcmVxL3NwZWVkc3RlcC1jZW50cmluby5jCj5pbmRleCA3NWIxMGVjZGI2
MGYuLjI4ZTY1YmNmNzI0MiAxMDA2NDQKPi0tLSBhL2RyaXZlcnMvY3B1ZnJlcS9zcGVlZHN0ZXAt
Y2VudHJpbm8uYwo+KysrIGIvZHJpdmVycy9jcHVmcmVxL3NwZWVkc3RlcC1jZW50cmluby5jCj5A
QCAtNDAwLDcgKzQwMCw3IEBAIHN0YXRpYyBpbnQgY2VudHJpbm9fY3B1X2luaXQoc3RydWN0IGNw
dWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gCXJldHVybiAwOwo+IH0KPiAKPi1zdGF0aWMgaW50IGNl
bnRyaW5vX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+K3N0YXRpYyB2
b2lkIGNlbnRyaW5vX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IHsK
PiAJdW5zaWduZWQgaW50IGNwdSA9IHBvbGljeS0+Y3B1Owo+IAo+QEAgLTQwOCw4ICs0MDgsNiBA
QCBzdGF0aWMgaW50IGNlbnRyaW5vX2NwdV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9s
aWN5KQo+IAkJcmV0dXJuIC1FTk9ERVY7Cj4gCj4gCXBlcl9jcHUoY2VudHJpbm9fbW9kZWwsIGNw
dSkgPSBOVUxMOwo+LQo+LQlyZXR1cm4gMDsKPiB9Cj4gCj4gLyoqCj5kaWZmIC0tZ2l0IGEvZHJp
dmVycy9jcHVmcmVxL3RlZ3JhMTk0LWNwdWZyZXEuYyBiL2RyaXZlcnMvY3B1ZnJlcS90ZWdyYTE5
NC1jcHVmcmVxLmMKPmluZGV4IDU5ODY1ZWE0NTVhOC4uMDdlYTdlZDYxYjY4IDEwMDY0NAo+LS0t
IGEvZHJpdmVycy9jcHVmcmVxL3RlZ3JhMTk0LWNwdWZyZXEuYwo+KysrIGIvZHJpdmVycy9jcHVm
cmVxL3RlZ3JhMTk0LWNwdWZyZXEuYwo+QEAgLTU1MSwxNCArNTUxLDEyIEBAIHN0YXRpYyBpbnQg
dGVncmExOTRfY3B1ZnJlcV9vZmZsaW5lKHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+
IAlyZXR1cm4gMDsKPiB9Cj4gCj4tc3RhdGljIGludCB0ZWdyYTE5NF9jcHVmcmVxX2V4aXQoc3Ry
dWN0IGNwdWZyZXFfcG9saWN5ICpwb2xpY3kpCj4rc3RhdGljIHZvaWQgdGVncmExOTRfY3B1ZnJl
cV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IHsKPiAJc3RydWN0IGRldmlj
ZSAqY3B1X2RldiA9IGdldF9jcHVfZGV2aWNlKHBvbGljeS0+Y3B1KTsKPiAKPiAJZGV2X3BtX29w
cF9yZW1vdmVfYWxsX2R5bmFtaWMoY3B1X2Rldik7Cj4gCWRldl9wbV9vcHBfb2ZfY3B1bWFza19y
ZW1vdmVfdGFibGUocG9saWN5LT5yZWxhdGVkX2NwdXMpOwo+LQo+LQlyZXR1cm4gMDsKPiB9Cj4g
Cj4gc3RhdGljIGludCB0ZWdyYTE5NF9jcHVmcmVxX3NldF90YXJnZXQoc3RydWN0IGNwdWZyZXFf
cG9saWN5ICpwb2xpY3ksCj5kaWZmIC0tZ2l0IGEvZHJpdmVycy9jcHVmcmVxL3ZleHByZXNzLXNw
Yy1jcHVmcmVxLmMgYi9kcml2ZXJzL2NwdWZyZXEvdmV4cHJlc3Mtc3BjLWNwdWZyZXEuYwo+aW5k
ZXggOWFjNGVhNTBiODc0Li5iMmE0MmNkYjk1ODIgMTAwNjQ0Cj4tLS0gYS9kcml2ZXJzL2NwdWZy
ZXEvdmV4cHJlc3Mtc3BjLWNwdWZyZXEuYwo+KysrIGIvZHJpdmVycy9jcHVmcmVxL3ZleHByZXNz
LXNwYy1jcHVmcmVxLmMKPkBAIC00NDcsNyArNDQ3LDcgQEAgc3RhdGljIGludCB2ZV9zcGNfY3B1
ZnJlcV9pbml0KHN0cnVjdCBjcHVmcmVxX3BvbGljeSAqcG9saWN5KQo+IAlyZXR1cm4gMDsKPiB9
Cj4gCj4tc3RhdGljIGludCB2ZV9zcGNfY3B1ZnJlcV9leGl0KHN0cnVjdCBjcHVmcmVxX3BvbGlj
eSAqcG9saWN5KQo+K3N0YXRpYyB2b2lkIHZlX3NwY19jcHVmcmVxX2V4aXQoc3RydWN0IGNwdWZy
ZXFfcG9saWN5ICpwb2xpY3kpCj4gewo+IAlzdHJ1Y3QgZGV2aWNlICpjcHVfZGV2Owo+IAo+QEAg
LTQ1OSw3ICs0NTksNiBAQCBzdGF0aWMgaW50IHZlX3NwY19jcHVmcmVxX2V4aXQoc3RydWN0IGNw
dWZyZXFfcG9saWN5ICpwb2xpY3kpCj4gCX0KPiAKPiAJcHV0X2NsdXN0ZXJfY2xrX2FuZF9mcmVx
X3RhYmxlKGNwdV9kZXYsIHBvbGljeS0+cmVsYXRlZF9jcHVzKTsKPi0JcmV0dXJuIDA7Cj4gfQo+
IAo+IHN0YXRpYyBzdHJ1Y3QgY3B1ZnJlcV9kcml2ZXIgdmVfc3BjX2NwdWZyZXFfZHJpdmVyID0g
ewo+LS0gCj4yLjI1LjEK
------=_Part_15534_1628508172.1712756547853
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div style=3D"line-height:1.7;color:#000000;font-size:14px;font-family:Aria=
l"><p style=3D"margin: 0;"><br></p><div style=3D"margin: 0;">Hi=EF=BC=8C</d=
iv><div style=3D"margin: 0;">&nbsp; &nbsp; &nbsp;I have already tested it, =
it is functioning properly, Please review.</div><div style=3D"margin: 0;"><=
br></div><div style=3D"margin: 0;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp=
; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nb=
sp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &=
nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=
=3D"font-size: 16px;"><b>Lizhe</b></span></div><div style=3D"margin: 0;">&n=
bsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp=
; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nb=
sp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &=
nbsp; &nbsp; &nbsp; &nbsp;Thanks</div><div style=3D"margin: 0;"><span style=
=3D"color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, verda=
na; font-size: 12px;">&nbsp; &nbsp; &nbsp;</span></div><p style=3D"margin: =
0;"><br></p><p style=3D"margin: 0;"><br></p><p style=3D"margin: 0;"><br></p=
><div style=3D"position:relative;zoom:1"></div><div id=3D"divNeteaseMailCar=
d"></div><p style=3D"margin: 0;"><br></p><pre><br>At 2024-04-10 21:22:47, "=
Lizhe" &lt;sensor1010@163.com&gt; wrote:
&gt;For the exit() callback function returning an int type value.
&gt;this leads many driver authors mistakenly believing that error
&gt;handling can be performed by returning an error code. However.
&gt;the returned value is ignore, and to improve this situation.
&gt;it is proposed to modify the return type of the exit() callback
&gt;function to void
&gt;
&gt;Signed-off-by: Lizhe &lt;sensor1010@163.com&gt;
&gt;---
&gt; drivers/cpufreq/acpi-cpufreq.c         | 4 +---
&gt; drivers/cpufreq/amd-pstate.c           | 7 ++-----
&gt; drivers/cpufreq/apple-soc-cpufreq.c    | 4 +---
&gt; drivers/cpufreq/bmips-cpufreq.c        | 4 +---
&gt; drivers/cpufreq/cppc_cpufreq.c         | 3 +--
&gt; drivers/cpufreq/cpufreq-dt.c           | 3 +--
&gt; drivers/cpufreq/e_powersaver.c         | 3 +--
&gt; drivers/cpufreq/intel_pstate.c         | 4 +---
&gt; drivers/cpufreq/mediatek-cpufreq-hw.c  | 4 +---
&gt; drivers/cpufreq/mediatek-cpufreq.c     | 4 +---
&gt; drivers/cpufreq/omap-cpufreq.c         | 3 +--
&gt; drivers/cpufreq/pasemi-cpufreq.c       | 6 ++----
&gt; drivers/cpufreq/powernow-k6.c          | 3 +--
&gt; drivers/cpufreq/powernow-k7.c          | 3 +--
&gt; drivers/cpufreq/powernow-k8.c          | 4 +---
&gt; drivers/cpufreq/powernv-cpufreq.c      | 4 +---
&gt; drivers/cpufreq/ppc_cbe_cpufreq.c      | 3 +--
&gt; drivers/cpufreq/qcom-cpufreq-hw.c      | 4 +---
&gt; drivers/cpufreq/qoriq-cpufreq.c        | 4 +---
&gt; drivers/cpufreq/scmi-cpufreq.c         | 4 +---
&gt; drivers/cpufreq/scpi-cpufreq.c         | 4 +---
&gt; drivers/cpufreq/sh-cpufreq.c           | 4 +---
&gt; drivers/cpufreq/sparc-us2e-cpufreq.c   | 3 +--
&gt; drivers/cpufreq/sparc-us3-cpufreq.c    | 3 +--
&gt; drivers/cpufreq/speedstep-centrino.c   | 4 +---
&gt; drivers/cpufreq/tegra194-cpufreq.c     | 4 +---
&gt; drivers/cpufreq/vexpress-spc-cpufreq.c | 3 +--
&gt; 27 files changed, 29 insertions(+), 74 deletions(-)
&gt;
&gt;diff --git a/drivers/cpufreq/acpi-cpufreq.c b/drivers/cpufreq/acpi-cpuf=
req.c
&gt;index 37f1cdf46d29..33f18140e9a4 100644
&gt;--- a/drivers/cpufreq/acpi-cpufreq.c
&gt;+++ b/drivers/cpufreq/acpi-cpufreq.c
&gt;@@ -906,7 +906,7 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_pol=
icy *policy)
&gt; =09return result;
&gt; }
&gt;=20
&gt;-static int acpi_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void acpi_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct acpi_cpufreq_data *data =3D policy-&gt;driver_data;
&gt;=20
&gt;@@ -919,8 +919,6 @@ static int acpi_cpufreq_cpu_exit(struct cpufreq_pol=
icy *policy)
&gt; =09free_cpumask_var(data-&gt;freqdomain_cpus);
&gt; =09kfree(policy-&gt;freq_table);
&gt; =09kfree(data);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static int acpi_cpufreq_resume(struct cpufreq_policy *policy)
&gt;diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.=
c
&gt;index 2015c9fcc3c9..60b3d20d5939 100644
&gt;--- a/drivers/cpufreq/amd-pstate.c
&gt;+++ b/drivers/cpufreq/amd-pstate.c
&gt;@@ -919,7 +919,7 @@ static int amd_pstate_cpu_init(struct cpufreq_polic=
y *policy)
&gt; =09return ret;
&gt; }
&gt;=20
&gt;-static int amd_pstate_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void amd_pstate_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct amd_cpudata *cpudata =3D policy-&gt;driver_data;
&gt;=20
&gt;@@ -927,8 +927,6 @@ static int amd_pstate_cpu_exit(struct cpufreq_polic=
y *policy)
&gt; =09freq_qos_remove_request(&amp;cpudata-&gt;req[0]);
&gt; =09policy-&gt;fast_switch_possible =3D false;
&gt; =09kfree(cpudata);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static int amd_pstate_cpu_resume(struct cpufreq_policy *policy)
&gt;@@ -1376,10 +1374,9 @@ static int amd_pstate_epp_cpu_init(struct cpufre=
q_policy *policy)
&gt; =09return ret;
&gt; }
&gt;=20
&gt;-static int amd_pstate_epp_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void amd_pstate_epp_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09pr_debug("CPU %d exiting\n", policy-&gt;cpu);
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static void amd_pstate_epp_update_limit(struct cpufreq_policy *policy)
&gt;diff --git a/drivers/cpufreq/apple-soc-cpufreq.c b/drivers/cpufreq/appl=
e-soc-cpufreq.c
&gt;index 021f423705e1..af34c22fa273 100644
&gt;--- a/drivers/cpufreq/apple-soc-cpufreq.c
&gt;+++ b/drivers/cpufreq/apple-soc-cpufreq.c
&gt;@@ -305,7 +305,7 @@ static int apple_soc_cpufreq_init(struct cpufreq_po=
licy *policy)
&gt; =09return ret;
&gt; }
&gt;=20
&gt;-static int apple_soc_cpufreq_exit(struct cpufreq_policy *policy)
&gt;+static void apple_soc_cpufreq_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct apple_cpu_priv *priv =3D policy-&gt;driver_data;
&gt;=20
&gt;@@ -313,8 +313,6 @@ static int apple_soc_cpufreq_exit(struct cpufreq_po=
licy *policy)
&gt; =09dev_pm_opp_remove_all_dynamic(priv-&gt;cpu_dev);
&gt; =09iounmap(priv-&gt;reg_base);
&gt; =09kfree(priv);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver apple_soc_cpufreq_driver =3D {
&gt;diff --git a/drivers/cpufreq/bmips-cpufreq.c b/drivers/cpufreq/bmips-cp=
ufreq.c
&gt;index 39221a9a187a..17a4c174553d 100644
&gt;--- a/drivers/cpufreq/bmips-cpufreq.c
&gt;+++ b/drivers/cpufreq/bmips-cpufreq.c
&gt;@@ -121,11 +121,9 @@ static int bmips_cpufreq_target_index(struct cpufr=
eq_policy *policy,
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int bmips_cpufreq_exit(struct cpufreq_policy *policy)
&gt;+static void bmips_cpufreq_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09kfree(policy-&gt;freq_table);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static int bmips_cpufreq_init(struct cpufreq_policy *policy)
&gt;diff --git a/drivers/cpufreq/cppc_cpufreq.c b/drivers/cpufreq/cppc_cpuf=
req.c
&gt;index 64420d9cfd1e..dccb9c1f087d 100644
&gt;--- a/drivers/cpufreq/cppc_cpufreq.c
&gt;+++ b/drivers/cpufreq/cppc_cpufreq.c
&gt;@@ -688,7 +688,7 @@ static int cppc_cpufreq_cpu_init(struct cpufreq_pol=
icy *policy)
&gt; =09return ret;
&gt; }
&gt;=20
&gt;-static int cppc_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void cppc_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct cppc_cpudata *cpu_data =3D policy-&gt;driver_data;
&gt; =09struct cppc_perf_caps *caps =3D &amp;cpu_data-&gt;perf_caps;
&gt;@@ -705,7 +705,6 @@ static int cppc_cpufreq_cpu_exit(struct cpufreq_pol=
icy *policy)
&gt; =09=09=09 caps-&gt;lowest_perf, cpu, ret);
&gt;=20
&gt; =09cppc_cpufreq_put_cpu_data(policy);
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static inline u64 get_delta(u64 t1, u64 t0)
&gt;diff --git a/drivers/cpufreq/cpufreq-dt.c b/drivers/cpufreq/cpufreq-dt.=
c
&gt;index 2d83bbc65dd0..eaf02579ea74 100644
&gt;--- a/drivers/cpufreq/cpufreq-dt.c
&gt;+++ b/drivers/cpufreq/cpufreq-dt.c
&gt;@@ -166,10 +166,9 @@ static int cpufreq_offline(struct cpufreq_policy *=
policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int cpufreq_exit(struct cpufreq_policy *policy)
&gt;+static void cpufreq_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09clk_put(policy-&gt;clk);
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver dt_cpufreq_driver =3D {
&gt;diff --git a/drivers/cpufreq/e_powersaver.c b/drivers/cpufreq/e_powersa=
ver.c
&gt;index ab93bce8ae77..6e958b09e1b5 100644
&gt;--- a/drivers/cpufreq/e_powersaver.c
&gt;+++ b/drivers/cpufreq/e_powersaver.c
&gt;@@ -360,14 +360,13 @@ static int eps_cpu_init(struct cpufreq_policy *po=
licy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int eps_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void eps_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09unsigned int cpu =3D policy-&gt;cpu;
&gt;=20
&gt; =09/* Bye */
&gt; =09kfree(eps_cpu[cpu]);
&gt; =09eps_cpu[cpu] =3D NULL;
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver eps_driver =3D {
&gt;diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pst=
ate.c
&gt;index dbbf299f4219..aa435d24c20e 100644
&gt;--- a/drivers/cpufreq/intel_pstate.c
&gt;+++ b/drivers/cpufreq/intel_pstate.c
&gt;@@ -2731,13 +2731,11 @@ static int intel_pstate_cpu_offline(struct cpuf=
req_policy *policy)
&gt; =09return intel_cpufreq_cpu_offline(policy);
&gt; }
&gt;=20
&gt;-static int intel_pstate_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void intel_pstate_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09pr_debug("CPU %d exiting\n", policy-&gt;cpu);
&gt;=20
&gt; =09policy-&gt;fast_switch_possible =3D false;
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static int __intel_pstate_cpu_init(struct cpufreq_policy *policy)
&gt;diff --git a/drivers/cpufreq/mediatek-cpufreq-hw.c b/drivers/cpufreq/me=
diatek-cpufreq-hw.c
&gt;index 8d097dcddda4..8925e096d5b9 100644
&gt;--- a/drivers/cpufreq/mediatek-cpufreq-hw.c
&gt;+++ b/drivers/cpufreq/mediatek-cpufreq-hw.c
&gt;@@ -260,7 +260,7 @@ static int mtk_cpufreq_hw_cpu_init(struct cpufreq_p=
olicy *policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int mtk_cpufreq_hw_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void mtk_cpufreq_hw_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct mtk_cpufreq_data *data =3D policy-&gt;driver_data;
&gt; =09struct resource *res =3D data-&gt;res;
&gt;@@ -270,8 +270,6 @@ static int mtk_cpufreq_hw_cpu_exit(struct cpufreq_p=
olicy *policy)
&gt; =09writel_relaxed(0x0, data-&gt;reg_bases[REG_FREQ_ENABLE]);
&gt; =09iounmap(base);
&gt; =09release_mem_region(res-&gt;start, resource_size(res));
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static void mtk_cpufreq_register_em(struct cpufreq_policy *policy)
&gt;diff --git a/drivers/cpufreq/mediatek-cpufreq.c b/drivers/cpufreq/media=
tek-cpufreq.c
&gt;index a0a61919bc4c..aba34fb7948e 100644
&gt;--- a/drivers/cpufreq/mediatek-cpufreq.c
&gt;+++ b/drivers/cpufreq/mediatek-cpufreq.c
&gt;@@ -599,13 +599,11 @@ static int mtk_cpufreq_init(struct cpufreq_policy=
 *policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int mtk_cpufreq_exit(struct cpufreq_policy *policy)
&gt;+static void mtk_cpufreq_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct mtk_cpu_dvfs_info *info =3D policy-&gt;driver_data;
&gt;=20
&gt; =09dev_pm_opp_free_cpufreq_table(info-&gt;cpu_dev, &amp;policy-&gt;fre=
q_table);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver mtk_cpufreq_driver =3D {
&gt;diff --git a/drivers/cpufreq/omap-cpufreq.c b/drivers/cpufreq/omap-cpuf=
req.c
&gt;index 895690856665..3458d5cc9b7f 100644
&gt;--- a/drivers/cpufreq/omap-cpufreq.c
&gt;+++ b/drivers/cpufreq/omap-cpufreq.c
&gt;@@ -135,11 +135,10 @@ static int omap_cpu_init(struct cpufreq_policy *p=
olicy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int omap_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void omap_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09freq_table_free();
&gt; =09clk_put(policy-&gt;clk);
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver omap_driver =3D {
&gt;diff --git a/drivers/cpufreq/pasemi-cpufreq.c b/drivers/cpufreq/pasemi-=
cpufreq.c
&gt;index 039a66bbe1be..ee925b53b6b9 100644
&gt;--- a/drivers/cpufreq/pasemi-cpufreq.c
&gt;+++ b/drivers/cpufreq/pasemi-cpufreq.c
&gt;@@ -204,21 +204,19 @@ static int pas_cpufreq_cpu_init(struct cpufreq_po=
licy *policy)
&gt; =09return err;
&gt; }
&gt;=20
&gt;-static int pas_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void pas_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09/*
&gt; =09 * We don't support CPU hotplug. Don't unmap after the system
&gt; =09 * has already made it to a running state.
&gt; =09 */
&gt; =09if (system_state &gt;=3D SYSTEM_RUNNING)
&gt;-=09=09return 0;
&gt;+=09=09return;
&gt;=20
&gt; =09if (sdcasr_mapbase)
&gt; =09=09iounmap(sdcasr_mapbase);
&gt; =09if (sdcpwr_mapbase)
&gt; =09=09iounmap(sdcpwr_mapbase);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static int pas_cpufreq_target(struct cpufreq_policy *policy,
&gt;diff --git a/drivers/cpufreq/powernow-k6.c b/drivers/cpufreq/powernow-k=
6.c
&gt;index 41eefef95d87..156bec6c5420 100644
&gt;--- a/drivers/cpufreq/powernow-k6.c
&gt;+++ b/drivers/cpufreq/powernow-k6.c
&gt;@@ -219,7 +219,7 @@ static int powernow_k6_cpu_init(struct cpufreq_poli=
cy *policy)
&gt; }
&gt;=20
&gt;=20
&gt;-static int powernow_k6_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void powernow_k6_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09unsigned int i;
&gt;=20
&gt;@@ -237,7 +237,6 @@ static int powernow_k6_cpu_exit(struct cpufreq_poli=
cy *policy)
&gt; =09=09=09break;
&gt; =09=09}
&gt; =09}
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static unsigned int powernow_k6_get(unsigned int cpu)
&gt;diff --git a/drivers/cpufreq/powernow-k7.c b/drivers/cpufreq/powernow-k=
7.c
&gt;index 5d515fc34836..4271446c8725 100644
&gt;--- a/drivers/cpufreq/powernow-k7.c
&gt;+++ b/drivers/cpufreq/powernow-k7.c
&gt;@@ -644,7 +644,7 @@ static int powernow_cpu_init(struct cpufreq_policy =
*policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int powernow_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void powernow_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; #ifdef CONFIG_X86_POWERNOW_K7_ACPI
&gt; =09if (acpi_processor_perf) {
&gt;@@ -655,7 +655,6 @@ static int powernow_cpu_exit(struct cpufreq_policy =
*policy)
&gt; #endif
&gt;=20
&gt; =09kfree(powernow_table);
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver powernow_driver =3D {
&gt;diff --git a/drivers/cpufreq/powernow-k8.c b/drivers/cpufreq/powernow-k=
8.c
&gt;index b10f7a1b77f1..5e663c3a6736 100644
&gt;--- a/drivers/cpufreq/powernow-k8.c
&gt;+++ b/drivers/cpufreq/powernow-k8.c
&gt;@@ -1089,7 +1089,7 @@ static int powernowk8_cpu_init(struct cpufreq_pol=
icy *pol)
&gt; =09return -ENODEV;
&gt; }
&gt;=20
&gt;-static int powernowk8_cpu_exit(struct cpufreq_policy *pol)
&gt;+static void powernowk8_cpu_exit(struct cpufreq_policy *pol)
&gt; {
&gt; =09struct powernow_k8_data *data =3D per_cpu(powernow_data, pol-&gt;cp=
u);
&gt; =09int cpu;
&gt;@@ -1104,8 +1104,6 @@ static int powernowk8_cpu_exit(struct cpufreq_pol=
icy *pol)
&gt; =09/* pol-&gt;cpus will be empty here, use related_cpus instead. */
&gt; =09for_each_cpu(cpu, pol-&gt;related_cpus)
&gt; =09=09per_cpu(powernow_data, cpu) =3D NULL;
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static void query_values_on_cpu(void *_err)
&gt;diff --git a/drivers/cpufreq/powernv-cpufreq.c b/drivers/cpufreq/powern=
v-cpufreq.c
&gt;index fddbd1ea1635..50c62929f7ca 100644
&gt;--- a/drivers/cpufreq/powernv-cpufreq.c
&gt;+++ b/drivers/cpufreq/powernv-cpufreq.c
&gt;@@ -874,7 +874,7 @@ static int powernv_cpufreq_cpu_init(struct cpufreq_=
policy *policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int powernv_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void powernv_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct powernv_smp_call_data freq_data;
&gt; =09struct global_pstate_info *gpstates =3D policy-&gt;driver_data;
&gt;@@ -886,8 +886,6 @@ static int powernv_cpufreq_cpu_exit(struct cpufreq_=
policy *policy)
&gt; =09=09del_timer_sync(&amp;gpstates-&gt;timer);
&gt;=20
&gt; =09kfree(policy-&gt;driver_data);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static int powernv_cpufreq_reboot_notifier(struct notifier_block *nb,
&gt;diff --git a/drivers/cpufreq/ppc_cbe_cpufreq.c b/drivers/cpufreq/ppc_cb=
e_cpufreq.c
&gt;index 88afc49941b7..5ee4c7bfdcc5 100644
&gt;--- a/drivers/cpufreq/ppc_cbe_cpufreq.c
&gt;+++ b/drivers/cpufreq/ppc_cbe_cpufreq.c
&gt;@@ -113,10 +113,9 @@ static int cbe_cpufreq_cpu_init(struct cpufreq_pol=
icy *policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int cbe_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void cbe_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09cbe_cpufreq_pmi_policy_exit(policy);
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static int cbe_cpufreq_target(struct cpufreq_policy *policy,
&gt;diff --git a/drivers/cpufreq/qcom-cpufreq-hw.c b/drivers/cpufreq/qcom-c=
pufreq-hw.c
&gt;index 70b0f21968a0..bb818111162d 100644
&gt;--- a/drivers/cpufreq/qcom-cpufreq-hw.c
&gt;+++ b/drivers/cpufreq/qcom-cpufreq-hw.c
&gt;@@ -573,7 +573,7 @@ static int qcom_cpufreq_hw_cpu_init(struct cpufreq_=
policy *policy)
&gt; =09return qcom_cpufreq_hw_lmh_init(policy, index);
&gt; }
&gt;=20
&gt;-static int qcom_cpufreq_hw_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void qcom_cpufreq_hw_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct device *cpu_dev =3D get_cpu_device(policy-&gt;cpu);
&gt; =09struct qcom_cpufreq_data *data =3D policy-&gt;driver_data;
&gt;@@ -583,8 +583,6 @@ static int qcom_cpufreq_hw_cpu_exit(struct cpufreq_=
policy *policy)
&gt; =09qcom_cpufreq_hw_lmh_exit(data);
&gt; =09kfree(policy-&gt;freq_table);
&gt; =09kfree(data);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static void qcom_cpufreq_ready(struct cpufreq_policy *policy)
&gt;diff --git a/drivers/cpufreq/qoriq-cpufreq.c b/drivers/cpufreq/qoriq-cp=
ufreq.c
&gt;index 0aecaecbb0e6..3519bf34d397 100644
&gt;--- a/drivers/cpufreq/qoriq-cpufreq.c
&gt;+++ b/drivers/cpufreq/qoriq-cpufreq.c
&gt;@@ -225,7 +225,7 @@ static int qoriq_cpufreq_cpu_init(struct cpufreq_po=
licy *policy)
&gt; =09return -ENODEV;
&gt; }
&gt;=20
&gt;-static int qoriq_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void qoriq_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct cpu_data *data =3D policy-&gt;driver_data;
&gt;=20
&gt;@@ -233,8 +233,6 @@ static int qoriq_cpufreq_cpu_exit(struct cpufreq_po=
licy *policy)
&gt; =09kfree(data-&gt;table);
&gt; =09kfree(data);
&gt; =09policy-&gt;driver_data =3D NULL;
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static int qoriq_cpufreq_target(struct cpufreq_policy *policy,
&gt;diff --git a/drivers/cpufreq/scmi-cpufreq.c b/drivers/cpufreq/scmi-cpuf=
req.c
&gt;index 3b4f6bfb2f4c..bf5f17f0dfb1 100644
&gt;--- a/drivers/cpufreq/scmi-cpufreq.c
&gt;+++ b/drivers/cpufreq/scmi-cpufreq.c
&gt;@@ -308,7 +308,7 @@ static int scmi_cpufreq_init(struct cpufreq_policy =
*policy)
&gt; =09return ret;
&gt; }
&gt;=20
&gt;-static int scmi_cpufreq_exit(struct cpufreq_policy *policy)
&gt;+static void scmi_cpufreq_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct scmi_data *priv =3D policy-&gt;driver_data;
&gt;=20
&gt;@@ -316,8 +316,6 @@ static int scmi_cpufreq_exit(struct cpufreq_policy =
*policy)
&gt; =09dev_pm_opp_remove_all_dynamic(priv-&gt;cpu_dev);
&gt; =09free_cpumask_var(priv-&gt;opp_shared_cpus);
&gt; =09kfree(priv);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static void scmi_cpufreq_register_em(struct cpufreq_policy *policy)
&gt;diff --git a/drivers/cpufreq/scpi-cpufreq.c b/drivers/cpufreq/scpi-cpuf=
req.c
&gt;index d33be56983ed..8d73e6e8be2a 100644
&gt;--- a/drivers/cpufreq/scpi-cpufreq.c
&gt;+++ b/drivers/cpufreq/scpi-cpufreq.c
&gt;@@ -167,7 +167,7 @@ static int scpi_cpufreq_init(struct cpufreq_policy =
*policy)
&gt; =09return ret;
&gt; }
&gt;=20
&gt;-static int scpi_cpufreq_exit(struct cpufreq_policy *policy)
&gt;+static void scpi_cpufreq_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct scpi_data *priv =3D policy-&gt;driver_data;
&gt;=20
&gt;@@ -175,8 +175,6 @@ static int scpi_cpufreq_exit(struct cpufreq_policy =
*policy)
&gt; =09dev_pm_opp_free_cpufreq_table(priv-&gt;cpu_dev, &amp;policy-&gt;fre=
q_table);
&gt; =09dev_pm_opp_remove_all_dynamic(priv-&gt;cpu_dev);
&gt; =09kfree(priv);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver scpi_cpufreq_driver =3D {
&gt;diff --git a/drivers/cpufreq/sh-cpufreq.c b/drivers/cpufreq/sh-cpufreq.=
c
&gt;index b8704232c27b..aa74036d0420 100644
&gt;--- a/drivers/cpufreq/sh-cpufreq.c
&gt;+++ b/drivers/cpufreq/sh-cpufreq.c
&gt;@@ -135,14 +135,12 @@ static int sh_cpufreq_cpu_init(struct cpufreq_pol=
icy *policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int sh_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void sh_cpufreq_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09unsigned int cpu =3D policy-&gt;cpu;
&gt; =09struct clk *cpuclk =3D &amp;per_cpu(sh_cpuclk, cpu);
&gt;=20
&gt; =09clk_put(cpuclk);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver sh_cpufreq_driver =3D {
&gt;diff --git a/drivers/cpufreq/sparc-us2e-cpufreq.c b/drivers/cpufreq/spa=
rc-us2e-cpufreq.c
&gt;index 2783d3d55fce..8a0cd5312a59 100644
&gt;--- a/drivers/cpufreq/sparc-us2e-cpufreq.c
&gt;+++ b/drivers/cpufreq/sparc-us2e-cpufreq.c
&gt;@@ -296,10 +296,9 @@ static int us2e_freq_cpu_init(struct cpufreq_polic=
y *policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int us2e_freq_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void us2e_freq_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09us2e_freq_target(policy, 0);
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver cpufreq_us2e_driver =3D {
&gt;diff --git a/drivers/cpufreq/sparc-us3-cpufreq.c b/drivers/cpufreq/spar=
c-us3-cpufreq.c
&gt;index 6c3657679a88..b50f9d13e6d2 100644
&gt;--- a/drivers/cpufreq/sparc-us3-cpufreq.c
&gt;+++ b/drivers/cpufreq/sparc-us3-cpufreq.c
&gt;@@ -140,10 +140,9 @@ static int us3_freq_cpu_init(struct cpufreq_policy=
 *policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int us3_freq_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void us3_freq_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09us3_freq_target(policy, 0);
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver cpufreq_us3_driver =3D {
&gt;diff --git a/drivers/cpufreq/speedstep-centrino.c b/drivers/cpufreq/spe=
edstep-centrino.c
&gt;index 75b10ecdb60f..28e65bcf7242 100644
&gt;--- a/drivers/cpufreq/speedstep-centrino.c
&gt;+++ b/drivers/cpufreq/speedstep-centrino.c
&gt;@@ -400,7 +400,7 @@ static int centrino_cpu_init(struct cpufreq_policy =
*policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int centrino_cpu_exit(struct cpufreq_policy *policy)
&gt;+static void centrino_cpu_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09unsigned int cpu =3D policy-&gt;cpu;
&gt;=20
&gt;@@ -408,8 +408,6 @@ static int centrino_cpu_exit(struct cpufreq_policy =
*policy)
&gt; =09=09return -ENODEV;
&gt;=20
&gt; =09per_cpu(centrino_model, cpu) =3D NULL;
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; /**
&gt;diff --git a/drivers/cpufreq/tegra194-cpufreq.c b/drivers/cpufreq/tegra=
194-cpufreq.c
&gt;index 59865ea455a8..07ea7ed61b68 100644
&gt;--- a/drivers/cpufreq/tegra194-cpufreq.c
&gt;+++ b/drivers/cpufreq/tegra194-cpufreq.c
&gt;@@ -551,14 +551,12 @@ static int tegra194_cpufreq_offline(struct cpufre=
q_policy *policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int tegra194_cpufreq_exit(struct cpufreq_policy *policy)
&gt;+static void tegra194_cpufreq_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct device *cpu_dev =3D get_cpu_device(policy-&gt;cpu);
&gt;=20
&gt; =09dev_pm_opp_remove_all_dynamic(cpu_dev);
&gt; =09dev_pm_opp_of_cpumask_remove_table(policy-&gt;related_cpus);
&gt;-
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static int tegra194_cpufreq_set_target(struct cpufreq_policy *policy,
&gt;diff --git a/drivers/cpufreq/vexpress-spc-cpufreq.c b/drivers/cpufreq/v=
express-spc-cpufreq.c
&gt;index 9ac4ea50b874..b2a42cdb9582 100644
&gt;--- a/drivers/cpufreq/vexpress-spc-cpufreq.c
&gt;+++ b/drivers/cpufreq/vexpress-spc-cpufreq.c
&gt;@@ -447,7 +447,7 @@ static int ve_spc_cpufreq_init(struct cpufreq_polic=
y *policy)
&gt; =09return 0;
&gt; }
&gt;=20
&gt;-static int ve_spc_cpufreq_exit(struct cpufreq_policy *policy)
&gt;+static void ve_spc_cpufreq_exit(struct cpufreq_policy *policy)
&gt; {
&gt; =09struct device *cpu_dev;
&gt;=20
&gt;@@ -459,7 +459,6 @@ static int ve_spc_cpufreq_exit(struct cpufreq_polic=
y *policy)
&gt; =09}
&gt;=20
&gt; =09put_cluster_clk_and_freq_table(cpu_dev, policy-&gt;related_cpus);
&gt;-=09return 0;
&gt; }
&gt;=20
&gt; static struct cpufreq_driver ve_spc_cpufreq_driver =3D {
&gt;--=20
&gt;2.25.1
</pre></div><img style=3D"width:1px;height:1px" src=3D"https://count.mail.1=
63.com/beacon/webmail.gif?type=3Dwebmail_mailtrace&amp;guid=3DENC_ZkIMXGZuI=
BYIIWBsXDYHcDVnQCEsCxknbDZOeStKH28LVkpCYTB4ZA0AeC9vI1xzYx4vdHRwe0gEUCkIOzM6=
EzRoXAF2eCJWey8pRw">
------=_Part_15534_1628508172.1712756547853--

